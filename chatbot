package uz.vtvs.bgbilling.service.telegram;

import java.util.ArrayList;
import java.util.List;
import java.io.IOException;
 
import org.telegram.telegrambots.ApiContextInitializer;
import org.telegram.telegrambots.TelegramBotsApi;
import org.telegram.telegrambots.api.methods.send.SendMessage;
import org.telegram.telegrambots.api.objects.Message;
import org.telegram.telegrambots.api.objects.Update;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.api.objects.replykeyboard.buttons.KeyboardRow;

import java.sql.Connection;
import ru.bitel.common.sql.ConnectionSet;
import ru.bitel.bgbilling.kernel.admin.news.server.bean.NewsManager;
import ru.bitel.bgbilling.kernel.admin.news.common.bean.News;
import ru.bitel.common.model.*;
	
public class ChatBot extends TelegramLongPollingBot 
{
    public static void main(String[] args) {
        //ApiContextInitializer.init();
        //TelegramBotsApi telegramBotsApi = new TelegramBotsApi();
        //try {
        //    telegramBotsApi.registerBot(new ChatBot());	
       // } catch (Exception e) {
       //     e.printStackTrace();
       // }
	}
	
    @Override
    public String getBotUsername() {
        return "Name Bot";
    }
 
    @Override
    public String getBotToken() {
        return "Token";
    }
 
    @Override
    public void onUpdateReceived(Update update) {
        Message message = update.getMessage();
        if (message != null && message.hasText()) {
        	switch (message.getText()) {
				case "lf":		sendMsg(message, "lf, в смысле ДА!.");
        						break;
				case "/news":	
		
        Connection con = connectionSet.getConnection();
        try(NewsManager newsManager = new NewsManager(con)){
            News news = newsManager.get(1);
            print(news.getText());
        }							
								sendMsg(message, "Новости скоро будут. А пока: " + news.getText() + " Все!");
								break;
				default:		sendMsg(message, "Задавайте вопрос.");
								break;
				}
				
            if (message.getText().equals("Привет"))
            {
                sendMsg(message, "Привет, я бот.");
                sendMsg(message, " А тебя как зовут?");
            }
           // else 
           //     sendMsg(message, "Я не знаю что ответить на это");
                
            if (message.getText().equals("/end"))
            {
                sendMsg(message, "Все! Пока! Я спать.");
                //sendMsg(message, " А тебя как зовут?");
            }
        }
        /*message = update.getMessage();// вот тут что написать, чтобы ожидать следующего сообщения от пользователя?
        if (message != null && message.hasText()) {
            
                sendMsg(message, "Привет, " + message.getText()); //юзер написал имя и теперь бот обратился к нему по этому имени
                sendMsg(message, "Ду ю вона сам ...? ");
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
                sendMsg(message, "Ор мейби ...?");
            }
            else
                sendMsg(message, "Я не знаю что ответить на это");*/
    }
    
    private void sendMsg(Message message, String text) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.enableMarkdown(true);
        sendMessage.setChatId(message.getChatId().toString());
		//sendMessage.setReplyToMessageId(message.getMessageId());
        sendMessage.setText(text);
        try {
            sendMessage(sendMessage);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
